package com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest;

import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.aggregates.FieldWorker;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.commands.AssignVinegrowerToFieldWorkerCommand;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.commands.CreateFieldWorkerCommand;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.queries.GetAllFieldWorkersByVinegrowerIdQuery;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.queries.GetAllFieldWorkersQuery;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.model.queries.GetFieldWorkerByIdQuery;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.services.fieldworker.FieldWorkerCommandService;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.domain.services.fieldworker.FieldWorkerQueryService;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.resources.AssignVinegrowerToFieldWorkerResource;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.resources.CreateFieldWorkerResource;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.resources.FieldWorkerResource;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.transform.AssignVinegrowerToFieldWorkerCommandFromResourceAssembler;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.transform.CreateFieldWorkerCommandFromResourceAssembler;
import com.elixirline.service.elixirline_backend.employeemanagement.employees.interfaces.rest.transform.FieldWorkerResourceAssembler;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping(value = "/api/v1/fieldworkers", produces = MediaType.APPLICATION_JSON_VALUE)
@Tag(name = "Field Workers", description = "Field Worker Management Endpoints")
public class FieldWorkerController {

    private final FieldWorkerCommandService commandService;
    private final FieldWorkerQueryService queryService;

    public FieldWorkerController(FieldWorkerCommandService commandService, FieldWorkerQueryService queryService) {
        this.commandService = commandService;
        this.queryService = queryService;
    }

    @PostMapping
    public ResponseEntity<FieldWorkerResource> createFieldWorker(@RequestBody @Valid CreateFieldWorkerResource resource) {
        CreateFieldWorkerCommand command = CreateFieldWorkerCommandFromResourceAssembler.toCommandFromResource(resource);
        FieldWorker fieldWorker = commandService.handle(command);
        FieldWorkerResource fieldWorkerResource = FieldWorkerResourceAssembler.toResource(fieldWorker);
        return ResponseEntity.status(HttpStatus.CREATED).body(fieldWorkerResource);
    }

    @GetMapping("/{id}")
    public ResponseEntity<FieldWorkerResource> getById(@PathVariable Long id) {
        return queryService.handle(new GetFieldWorkerByIdQuery(id))
                .map(FieldWorkerResourceAssembler::toResource)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<FieldWorkerResource>> getAll() {
        List<FieldWorker> fieldWorkers = queryService.handle(new GetAllFieldWorkersQuery());
        List<FieldWorkerResource> resources = fieldWorkers.stream()
                .map(FieldWorkerResourceAssembler::toResource)
                .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }

    @GetMapping("/vinegrower/{vinegrowerId}")
    public ResponseEntity<List<FieldWorkerResource>> getAllByVinegrower(@PathVariable Long vinegrowerId) {
        List<FieldWorker> fieldWorkers = queryService.handle(new GetAllFieldWorkersByVinegrowerIdQuery(vinegrowerId));
        List<FieldWorkerResource> resources = fieldWorkers.stream()
                .map(FieldWorkerResourceAssembler::toResource)
                .collect(Collectors.toList());
        return ResponseEntity.ok(resources);
    }


    @PostMapping("/{fieldWorkerId}/assign-vinegrower")
    public ResponseEntity<Void> assignVinegrowerToFieldWorker(@PathVariable Long fieldWorkerId, @RequestBody @Valid AssignVinegrowerToFieldWorkerResource resource) {
        AssignVinegrowerToFieldWorkerCommand command = AssignVinegrowerToFieldWorkerCommandFromResourceAssembler.toCommandFromResource(resource);
        commandService.handle(command);
        return ResponseEntity.noContent().build();
    }
}

